library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_unsigned.all;
 
entity clk64kHz is
    Port (
        clk    : in  STD_LOGIC;
        reset  : in  STD_LOGIC;
        clk_out: out STD_LOGIC
    );
end clk64kHz;
 
architecture Behavioral of clk64kHz is
    signal temporal: STD_LOGIC;
    signal counter : integer range 0 to 4999 := 0;
begin
    freq_divider: process (reset, clk) begin
        if (reset = '1') then
            temporal <= '0';
            counter  <= 0;
        elsif rising_edge(clk) then
            if (counter = 4999) then
                temporal <= NOT(temporal);
                counter  <= 0;
            else
                counter <= counter + 1;
            end if;
        end if;
    end process;
 
    clk_out <= temporal;
end Behavioral;

entity pwm is
    port(
        clr : in std_logic;
        clk : in std_logic;
        duty : in std_logic_vector (7 downto 0);
        period : in std_logic_vector (7 downto 0);
        pwm : out std_logic
    );


end pwm;


architecture pwm of pwm is


signal count : std_logic_vector(7 downto 0);


begin


    cnt: process(clk, clr) -- 4 bit counter
    begin
        if clr = '1' then
            count <= "00000000";
        elsif clk'event and clk = '1' then
            if count = period -1 then
                count <= "00000000";
            else
                count <= count +1;
            end if;
        end if;
    end process cnt;


    pwmout: process(count, duty)
    begin
        if count < duty then
            pwm <= '1';
        else
            pwm <= '0';
        end if;
    end process pwmout;


end pwm;


entity pwm_top is
    port(
        clr : in std_logic;
        clk : in std_logic;
        duty : in std_logic_vector (7 downto 0);
        pwm : out std_logic
    );


end pwm_top;





architecture pwm_top of pwm_top is


signal new_clock : std_logic;


begin


clk_div: entity work.clk64kHz
        port map(
            clk => clk, reset => '0', clk_out => new_clock);


Pulse: entity work.pwm
        port map(
            clr => clr, clk => new_clock, duty => duty, period => "11001000", pwm => pwm);            
            
end pwm_top;
